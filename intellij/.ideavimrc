let leader=" "
 " Selected Intellimacs modules

""" This file contains default spacemacs settings and key bindings

source ~/.intellimacs/spacemacs/text.vim
source ~/.intellimacs/spacemacs/errors.vim

source ~/.intellimacs/spacemacs/settings.vim
source ~/.intellimacs/spacemacs/misc.vim
" Key bindings
source ~/.intellimacs/spacemacs/leader.vim

let g:WhichKeyDesc_Quit = "<leader>q    +quit"
source ~/.intellimacs/spacemacs/quit.vim

let g:WhichKeyDesc_SearchSymbol = "<leader>s    +search/symbol"
source ~/.intellimacs/spacemacs/search-symbol.vim
source ~/.intellimacs/extra/search.vim


let g:WhichKeyDesc_Windows = "<leader>w    +windows"
source ~/.intellimacs/spacemacs/windows.vim
source ~/.intellimacs/extra/windows.vim

let g:WhichKeyDesc_Files = "<leader>f    +files"
source ~/.intellimacs/spacemacs/files.vim
source ~/.intellimacs/extra/files.vim

let g:WhichKeyDesc_Buffers = "<leader>b    +buffers"
source ~/.intellimacs/spacemacs/buffers.vim

let g:WhichKeyDesc_GitVcs = "<leader>g    +git/version-control"
source ~/.intellimacs/spacemacs/git-vcs.vim
source ~/.intellimacs/extra/git-vcs.vim

nmap ]g :action VcsShowNextChangeMarker<CR><ESC>
nmap [g :action VcsShowPrevChangeMarker<CR><ESC>

nnoremap ]] *
nnoremap [[ #

set visualbell
set noerrorbells

" source ~/.intellimacs/extra.vim
source ~/.intellimacs/major.vim

let g:WhichKeyDesc_Major_Refactoring = "<leader>mr +refactor"
source ~/.intellimacs/major/refactoring.vim
source ~/.intellimacs/which-key.vim

xmap S <Plug>VSurround

nnoremap Y y$

nnoremap <leader>ga :action Annotate<CR>
vnoremap <leader>ga :action Annotate<CR>


" Comma for major mode
nmap , <leader>m
vmap , <leader>m

" Use C-y for accepting completins
imap <C-y>           :action EditorChooseLookupItemReplace<CR>

" Make the neovim shortcuts work
let g:WhichKeyDesc_Projects_Tree  = "<leader>e file-tree"
nnoremap <leader>e   :NERDTree<CR>
vnoremap <leader>e   :NERDTree<CR>

" Show usages for symbol.
" Ideally this should be FindInPath the current word, but I think that it is
" not possible.
let g:WhichKeyDesc_Leader_ShowUsages = "gr show-usages"
nnoremap gr    :action ShowUsages<CR>

" Go to next error
let g:WhichKeyDesc_Errors_NextError = "]e next-error"
nnoremap ]e    :action GotoNextError<CR>
vnoremap ]e    <Esc>:action GotoNextError<CR>

" Go to previous error
let g:WhichKeyDesc_Errors_PreviousError = "[e previous-error"
nnoremap [e    :action GotoPreviousError<CR>
vnoremap [e    <Esc>:action GotoPreviousError<CR>


nnoremap L     :action NextTab<CR>
nnoremap H     :action PreviousTab<CR>

source ~/.intellimacs/spacemacs/insertion.vim
source ~/.intellimacs/spacemacs/jump-join-split.vim

" Jump to symbol
let g:WhichKeyDesc_JumpJoinSplit_JumpToSymbol = "<leader>js jump-to-symbol"
nnoremap <leader>js    :action GotoSymbol<CR>
vnoremap <leader>js    :action GotoSymbol<CR>

nnoremap <leader>jj    :action AceAction<CR>

set ideajoin
set ideaput
set mini-ai
set peekaboo

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'preservim/nerdtree'
Plug 'machakann/vim-highlightedyank'
Plug 'vim-scripts/argtextobj.vim'
Plug 'tommcdo/vim-exchange'
Plug 'kana/vim-textobj-entire'
Plug 'terryma/vim-multiple-cursors'
" Plug 'vim-scripts/ReplaceWithRegister'
"
"
" Custom window shortcuts
sethandler <c-h> i-v:vim
sethandler <c-l> i-v:vim
sethandler <c-j> i-v:vim
sethandler <c-k> i-v:vim
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k


" Multiple cursor support
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
omap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
omap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence
nmap <A-n> <Plug>AllWholeOccurrences
xmap <A-n> <Plug>AllWholeOccurrences
omap <A-n> <Plug>AllWholeOccurrences
nmap g<A-n> <Plug>AllWholeOccurrences
xmap g<A-n> <Plug>AllWholeOccurrences
omap g<A-n> <Plug>AllWholeOccurrences
